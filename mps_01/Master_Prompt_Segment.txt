[[START OF MASTER PROMPT SEGMENT: AI Project Planning & Task Generation Instructions]]

ATTENTION PLANNING AI: Your primary function is to interpret the user's project request (provided immediately preceding this segment) and generate a comprehensive, phased execution plan. This involves creating detailed task prompts for subsequent AI instances ("Task AIs") and all necessary supporting documentation. Adhere strictly to the following instructions and output requirements.

**I. USER-SPECIFIED PATHS & DEFAULTS:**
The user may provide paths for:
    A. Destination for submodule development plans (`_dev_plan.md`, `_next_steps.md`).
    B. Folder for generated task prompts and launch plans.
    C. Folder for inter-AI communication/documentation.
    D. The main iteration folder (e.g., `mps_01`, `gritos_mps_test_01`). If the user specifies `.` (a single dot) for this, it means the current working directory where you are invoked IS the Main Iteration Folder.
    E. A User-Specified Task Output Base Path (where Task AIs should place their primary deliverables like code).

You **must** parse the `[[USER PATH CONFIGURATION]]` block at the beginning of this overall prompt. Use the paths specified there.
*   If `Main Iteration Folder` is `.`, then all other paths (Submodule Plan Destination, Prompts Folder, etc.) should be interpreted as relative to this current working directory. For example, if `Main Iteration Folder: .` and `Prompts Folder: prompts`, the prompts folder is `./prompts/`.
*   If `Main Iteration Folder` is a named path (e.g., `mps_01`), then other paths are relative to *that* named path. For example, if `Main Iteration Folder: mps_01` and `Prompts Folder: prompts`, the prompts folder is `mps_01/prompts/`.
*   If any path *other than* `Main Iteration Folder` is missing from the block, you may use a logical default (e.g., `prompts/` for Prompts Folder, `prompts/ipc/` for Inter-AI Communication Folder, `plan/` for Submodule Plan Destination) but state this assumption clearly in your `00_task_launch_plan.md`.
*   All paths you generate in prompts and plans must be constructed clearly and correctly, reflecting these user-specified (or your defaulted) locations, typically as paths relative to the repository root.

**II. CORE PLANNING & TASK DEFINITION DIRECTIVES:**

1.  **Understand User's Project:** Thoroughly analyze the user's project description, including any referenced input documents (specifications, research, requirements) and exemplar plans for style and detail. Perform research if indicated. The primary deliverable you will be creating based on the user's request is often a main development plan document (e.g., `gritos_dev_plan.md`); your subsequent task prompts will break this main plan into executable pieces.
2.  **Phased Structure:** Decompose the project into 2-5 logical phases. Tasks within a phase should be executable in parallel; phases themselves are sequential.
3.  **Task Granularity & Parallelism:** Define tasks within each phase to be as granular as possible while remaining meaningful. Design these tasks for maximum parallel execution by different Task AIs.
4.  **Merge Conflict Mitigation Strategy (HIGHEST PRIORITY):**
    *   Your **highest priority** during task decomposition is the elimination or severe mitigation of potential merge conflicts.
    *   Actively identify any tasks that might write to the same file(s) or where one task might read a file that a concurrent task in the same phase modifies.
    *   If such a potential conflict is identified:
        *   First, attempt to redesign the tasks to operate on entirely separate files or distinct, non-overlapping parts of shared files. Task AIs should primarily create *new* files in their designated output directories (see `User-Specified Task Output Base Path`).
        *   If redesign is not feasible to completely avoid the conflict, you **must** serialize these tasks. This means placing them in different phases, or if they must remain within the same conceptual phase due to logical grouping, ensure your generated `00_task_launch_plan.md` clearly indicates a specific sequential order for these conflicting tasks *within* that phase, and the task prompts reflect this dependency.
        *   Task prompts for serialized tasks must clearly state their dependencies on the completion of preceding tasks.
    *   If a task *must* modify existing shared code (as per the `User-Specified Task Output Base Path`), the task prompt you generate for that task must be *extremely specific* about the exact functions, classes, or sections of code to be modified, the nature of the changes, and any assumptions about the state of that shared code. Also, instruct the Task AI to be extra vigilant in using the `Owned-Files-Modules` field in the Information Exchange Protocol (IEP) for such shared resources.
5.  **File Naming Conventions:**
    *   Main Development Plan (if you are creating/drafting its content): As specified by user (e.g., `gritos_dev_plan.md`), place in the "Submodule Plan Destination" path.
    *   Task Prompts: `p<Phase#_t<Task#_<brief_description_lowercase_underscores>.txt` (e.g., `p1_t1_database_schema.txt`).
    *   Task Launch Plan: `00_task_launch_plan.md`.
    *   Submodule Dev Plans (created by Task AIs): `<prompt_filename_base>_dev_plan.md` (e.g., `p1_t1_database_schema_dev_plan.md`).
    *   Next Steps Docs (created by Task AIs): `<prompt_filename_base>_next_steps.md`.

**III. OUTPUT GENERATION REQUIREMENTS:**

All file paths you generate should be relative to the repository root.

**A. Main Development Plan Document (e.g., `gritos_dev_plan.md`):**
    *   Based on the user's request, you will develop the content for this plan.
    *   **Location:** Construct the full path relative to the repository root. For example, if "Main Iteration Folder" is `gritos_mps_test_01` and "Submodule Plan Destination" is `plan`, then the file path is `gritos_mps_test_01/plan/gritos_dev_plan.md`. If "Main Iteration Folder" is `.` and "Submodule Plan Destination" is `plan`, the path is `plan/gritos_dev_plan.md`.

**B. Task Prompt Files (`.txt`):**
    *   **Location:** Construct the full path to your "Prompts Folder" relative to the repository root (e.g., `gritos_mps_test_01/prompts/` or `./prompts/`).
    *   **For Each Task Defined in your Main Development Plan, Generate a Prompt File Containing:**
        1.  **Task Overview:** Purpose of this specific task, its contribution to the current phase and overall project. Reference the relevant section of the Main Development Plan document you created.
        2.  **Sub-Development Plan Directive:**
            *   "You must first create a detailed sub-development plan for this task. Save it as `<PhaseTaskName>_dev_plan.md` in the user-specified submodule plan destination folder: `[Full path to Submodule Plan Destination, relative to repo root]`. This plan must list your detailed steps. Mark your progress in this file (e.g., using markdown checkboxes: `[ ] Step 1`, `[x] Step 2`)."
        3.  **Detailed Task Execution Instructions:** Clear, actionable steps to complete the task, referencing any necessary input documents.
        4.  **Output Management:**
            *   "Place all new files, code, or artifacts created *specifically for this task* and not intended as direct modifications to existing shared project code into a dedicated task-specific subdirectory within the `User-Specified Task Output Base Path` (`[Actual User-Specified Task Output Base Path]`). For this task, your primary output subdirectory should be `[Actual User-Specified Task Output Base Path]/<PhaseTaskName>/`. If this task involves modifying existing shared project code directly within `[Actual User-Specified Task Output Base Path]`, refer to the specific instructions in the main project prompt regarding those modifications and be meticulous with IEP commit messages and the `Owned-Files-Modules` field." (Ensure `<PhaseTaskName>` is specific to the task).
        5.  **Information Exchange Protocol (IEP) Adherence:**
            *   "You **must** strictly adhere to the `Information_Exchange_Protocol.md` (located in `[Full path to Information_Exchange_Protocol.md, relative to repo root], it is in the repo`) for all your commit messages. Pay close attention to `Status`, `Owned-Files-Modules`, `[BLOCKERS / ISSUES]`, and `[PROGRESS]` sections."
        6.  **"Next Steps & Improvements" Document Directive:**
            *   "After completing your primary task, create a document named `<PhaseTaskName>_next_steps.md` in the same location as your `_dev_plan.md` (`[Full path to Submodule Plan Destination, relative to repo root]`). This document must include:
                *   Potential next steps, enhancements, or optimizations for the content/code you developed.
                *   A dedicated section titled 'AI-Automated PR Suggestions': Your thoughts on how a Pull Request for your work could be best formulated for AI-assisted creation/review.
                *   A section titled 'Other Recommendations': Any general recommendations for improving the overall project or development process."
        7.  **Inter-AI Communication Directive:**
            *   "For persistent communication, detailed logs, or shared artifacts relevant to other AI tasks that don't fit commit messages, use the designated inter-AI communication folder: `[Full path to Inter-AI Communication Folder, relative to repo root]/`. Document any such usage in your commit messages."
        8.  **Retry Logic (Verbatim Text):**
            *   "```If you are starting this task and a previous AI instance may have already worked on it and crashed, your first step is to thoroughly investigate and determine what that instance completed. Check version control (git log), the file system (especially in `[Full path to Submodule Plan Destination, relative to repo root]/<PhaseTaskName>_dev_plan.md` and your task output directory `[Actual User-Specified Task Output Base Path]/<PhaseTaskName>/`), and any logs in `[Full path to Inter-AI Communication Folder, relative to repo root]/`. Document your findings in your `_dev_plan.md`. Then, proceed to complete the task fully from where the previous instance left off. Do not repeat successfully completed work.```" (Ensure `<PhaseTaskName>` is correctly substituted).
        9.  **Path Referencing:** When providing file paths to the Task AI, ensure they are full paths relative to the repository root and append ", it is in the repo." to aid discovery.

**C. Supporting Documentation (in the designated "Prompts Folder", path relative to repo root):**

1.  **`Information_Exchange_Protocol.md`:**
    *   Create this file. Its content **must be** (verbatim text of IEP, as defined in the prompt that *invoked you with this MPS*).
2.  **`00_task_launch_plan.md`:**
    *   Create this file using the template (as defined in the prompt that *invoked you with this MPS*). You **must** dynamically replace placeholders.
    *   **Crucially:** The "Initial Launch" and "Retry if Crashed" commands within this `00_task_launch_plan.md` file must present the *full path to the task prompt file, relative to the repository root*. For example, if `Main Iteration Folder: .` and `Prompts Folder: prompts`, a task prompt `p1_t1.txt` should be launched as `prompts/p1_t1.txt is the prompt, it is in the repo.`. If `Main Iteration Folder: mps_01` and `Prompts Folder: prompts`, it would be `mps_01/prompts/p1_t1.txt is the prompt, it is in the repo.`.

**IV. FINAL INSTRUCTION TO PLANNING AI:**
Your own final commit message for completing *this planning and generation task* must also adhere to the `Information_Exchange_Protocol.md` you've just defined, as much as is applicable. Use a relevant Task-ID like "INITIAL_PROJECT_PLANNING_ITER_XX" (replace XX with the iteration number from `Main Iteration Folder` if named, or `CWD` if `Main Iteration Folder: .`).

**V. TASK RESUMPTION ADD-ON INCORPORATION (MANDATORY):**
For every task prompt you generate as per Section III.B above, you **must append** the complete and unmodified content of the "Task Resumption Add-on". This add-on's text is specified in `mps_01/add_ons/task_resumption_addon.txt` (this is a fixed path relative to the repository root). You are responsible for retrieving this add-on text and including it in each generated task prompt. Ensure all path placeholders within the add-on (like `[Full path to Prompts Folder, relative to repo root]`, `[Full path to Submodule Plan Destination, relative to repo root]`, `[Actual User-Specified Task Output Base Path]`, `<ExactOriginalTaskPromptFilenameBase>`) are correctly resolved by you when you embed the add-on into the final task prompts.

[[END OF MASTER PROMPT SEGMENT]]
