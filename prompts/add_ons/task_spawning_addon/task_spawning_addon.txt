ATTENTION PLANNING AI: Your primary function is to interpret the user's project request (provided by the user *before* the Master Prompt Segment begins, and accessible via `User_High_Level_Project_Goal` variable from Core Instructions Section I.A) and then to follow the instructions within this `task_spawning_addon` to generate a comprehensive, phased execution plan. This involves creating detailed task prompts for subsequent AI instances ("Task AIs") and all necessary supporting documentation. Adhere strictly to the following instructions and output requirements.

**I. PARAMETER RESOLUTION FOR TASK_SPAWNING_ADDON:**

A.  **Acknowledge Component and Configuration Source:**
    1.  You are currently executing the `task_spawning_addon`.
    2.  Your primary configuration parameters are defined in `prompts/add_ons/task_spawning_addon/USER_task_spawning_addon_CONFIG.txt`. This file specifies parameter names, their requirements (Required/Optional), default types (Accepted/Placeholder), descriptions, and default values.
    3.  The Core Planning Instructions (Section I.D.4.c.iii) should have already scanned the main user prompt and loaded any content from a `[[USER_CONFIG_FOR_task_spawning_addon]]...[[END_USER_CONFIG_FOR_task_spawning_addon]]` block into the `App_Specific_Configs_Content_Map['task_spawning_addon']` variable. This content takes highest precedence.

B.  **Resolve Parameters:**
    You MUST resolve the following parameters by adhering to the standard resolution order:
    1.  Value from the `[[USER_CONFIG_FOR_task_spawning_addon]]` block (passed in `App_Specific_Configs_Content_Map['task_spawning_addon']`).
    2.  User-edited value in `USER_task_spawning_addon_CONFIG.txt` (between `[USER_VALUE_START]` and `[USER_VALUE_END]` markers for each parameter).
    3.  The "AcceptedDefault" value specified in the comment for that parameter in `USER_task_spawning_addon_CONFIG.txt` (e.g., `# Default: actual_default_value`).
    4.  If a parameter is marked `# Requirement: Required` and its `# DefaultType: Placeholder`, and it remains unresolved after steps 1-3, you MUST request the value from the user via chat. After receiving the value, you MUST update the on-disk `prompts/add_ons/task_spawning_addon/USER_task_spawning_addon_CONFIG.txt` file (specifically the value between `[USER_VALUE_START]` and `[USER_VALUE_END]`) AND advise the user to also update their main spawn prompt's `[[USER_CONFIG_FOR_task_spawning_addon]]` block with this new value for future consistency.
    5.  If any "Required" parameter cannot be resolved, issue a CRITICAL ERROR and HALT.

C.  **Internal Storage of Resolved Parameters:**
    Store the resolved values internally using clear variable names. For example:
    *   `Resolved_TSA_Project_Name` (from `PROJECT_NAME` parameter)
    *   `Resolved_TSA_Iteration_ID` (from `ITERATION_ID` parameter)
    *   `Resolved_TSA_Base_Output_Path` (from `BASE_OUTPUT_PATH` parameter)
    *   `Resolved_TSA_Main_Dev_Plan_Filename` (from `MAIN_DEV_PLAN_FILENAME` parameter)
    *   `Resolved_TSA_Task_Prompts_Subdir` (from `TASK_PROMPTS_SUBDIR` parameter)
    *   `Resolved_TSA_Submodule_Plans_Subdir` (from `SUBMODULE_PLANS_SUBDIR` parameter)
    *   `Resolved_TSA_Task_Artifacts_Subdir` (from `TASK_ARTIFACTS_SUBDIR` parameter)

D.  **Path Construction Principle:**
    All output paths generated by *this* `task_spawning_addon` (for the main plan, TLP, task prompts, and paths referenced *within* those task prompts) MUST be constructed based on these `Resolved_TSA_...` parameters. Ensure paths are clear and typically relative to the repository root (unless `Resolved_TSA_Base_Output_Path` is an absolute path).

**II. CORE PLANNING & TASK DEFINITION DIRECTIVES:**
1.  **Understand User's Project:** Thoroughly analyze `User_High_Level_Project_Goal`, including any referenced input documents and exemplar plans. Perform research if indicated. Your primary deliverable is the Main Development Plan document (its path and filename are derived from `Resolved_TSA_Base_Output_Path` and `Resolved_TSA_Main_Dev_Plan_Filename`); your task prompts will break this main plan into executable pieces.
2.  **Phased Structure:** Decompose the project into 2-5 logical phases.
3.  **Task Granularity & Parallelism:** Define tasks within each phase to be as granular as possible while remaining meaningful, designed for maximum parallel execution.
4.  **Merge Conflict Mitigation Strategy (HIGHEST PRIORITY):**
    *   Your **highest priority** is to eliminate or severely mitigate potential merge conflicts.
    *   Actively identify tasks that might conflict.
    *   If conflict identified:
        *   First, try to redesign tasks for separate files/parts. Task AIs should primarily create *new* files in their designated output directories (constructed using `Resolved_TSA_Base_Output_Path` and `Resolved_TSA_Task_Artifacts_Subdir`).
        *   If redesign fails, **must** serialize these tasks (different phases, or explicitly sequenced in TLP using 'Dependencies' field, see relevant TLP generation instructions). Task prompts must state these dependencies (e.g., "Note: This task depends on Task X (`[Task_X_Prompt_Filename]`). Ensure its deliverables are available...").
    *   If a task *must* modify existing shared code (assumed to be within the path constructed from `Resolved_TSA_Base_Output_Path` and `Resolved_TSA_Task_Artifacts_Subdir`), its prompt must be *extremely specific* about changes and AI must be vigilant with IEP `Owned-Files-Modules`.
5.  **File Naming Conventions (Outputs of this Add-on):**
    *   Main Development Plan: `[Resolved_TSA_Main_Dev_Plan_Filename]` (located directly under `[Resolved_TSA_Base_Output_Path]`).
    *   Task Prompts: `p<Phase#_t<Task#_<brief_description_lowercase_underscores>.txt` (located in the directory `[Resolved_TSA_Base_Output_Path]/[Resolved_TSA_Task_Prompts_Subdir]/`).
    *   Task Launch Plan: `00_task_launch_plan.md` (located in the directory `[Resolved_TSA_Base_Output_Path]/[Resolved_TSA_Task_Prompts_Subdir]/`).
    *   Submodule Dev Plans (generated by Task AIs): `<prompt_filename_base>_dev_plan.md`.
    *   Next Steps Docs (generated by Task AIs): `<prompt_filename_base>_next_steps.md`.
6.  **Task Effort Estimation (Heuristic):**
    *   For each task, estimate effort: S (Small), M (Medium), L (Large), XL (Extra Large).
    *   Base on work amount, components, complexity, unknowns.
    *   Aim for S or M. If L, ensure well-defined. **Avoid XL; decompose further.** If unavoidable, flag in TLP and suggest user review.
7.  **Planning Confidence Assessment & Reporting:**
    *   After generating the complete plan, self-assess your confidence: **High, Medium, or Low.**
    *   Base on: clarity of user request, task decomposition success, number of serializations, information completeness.
    *   Report score and rationale: 1. At top of `00_task_launch_plan.md`. 2. In your final commit message (`[PLANNING_CONFIDENCE]` block - see Core Instructions Section IV.B).
8.  **Visual Plan Overview Generation (Mermaid Syntax):**
    *   Generate a Mermaid JS flowchart: phases as subgraphs, key tasks (Task IDs/short descriptions), dependencies as arrows, phase sequence.
    *   Embed in `00_task_launch_plan.md` (after Confidence Score). Example:
        \`\`\`mermaid
        graph TD; subgraph Phase 1; P1_T1["T1.1"]; P1_T2["T1.2"]; end; subgraph Phase 2; P2_T1["T2.1"]; end; P1_T1-->P2_T1; P1_T2-->P2_T1;
        \`\`\`
        (Adapt complexity; for large plans, show major tasks/flows).

**III. OUTPUT GENERATION REQUIREMENTS (Specific to Task Spawning):**

A.  **Main Development Plan Document:**
    *   Develop content based on `User_High_Level_Project_Goal`.
    *   **Location:** `[Resolved_TSA_Base_Output_Path]/[Resolved_TSA_Main_Dev_Plan_Filename]`.

B.  **Task Prompt Files (`.txt`):**
    *   **Base Location for Task Prompts:** The directory `[Resolved_TSA_Base_Output_Path]/[Resolved_TSA_Task_Prompts_Subdir]/`. All individual task prompt files and the TLP will be saved here.
    *   **For Each Task, Generate a Prompt File Containing:**
        1.  **Task Overview:** Purpose, contribution, reference to Main Dev Plan. If dependent (from TLP), reiterate dependency (e.g., "Depends on `TaskX_ID`...").
        2.  **Sub-Development Plan Directive:** "Create `<PhaseTaskName>_dev_plan.md` in the directory `[Resolved_TSA_Base_Output_Path]/[Resolved_TSA_Submodule_Plans_Subdir]/`. List steps; mark progress."
        3.  **Detailed Task Execution Instructions:** Actionable steps, reference inputs.
        4.  **Output Management:** "Place new, task-specific files in the directory `[Resolved_TSA_Base_Output_Path]/[Resolved_TSA_Task_Artifacts_Subdir]/<PhaseTaskName>/`. For modifying shared code (if any, assumed to be within `[Resolved_TSA_Base_Output_Path]/[Resolved_TSA_Task_Artifacts_Subdir]/`), be specific and use IEP `Owned-Files-Modules`."
        5.  **IEP Adherence:** "Follow `Information_Exchange_Protocol.md` (located at `[Resolved_TSA_Base_Output_Path]/[Resolved_TSA_Task_Prompts_Subdir]/Information_Exchange_Protocol.md`, it is in the repo). Focus on `Status`, `Owned-Files-Modules`, `[BLOCKERS / ISSUES]`, `[PROGRESS]`, and **`[RISK_ASSESSMENT]` block.**" (IEP generation is handled by Core Instructions Section III.C.1 and placed in this add-on's task prompts output directory).
        6.  **"Next Steps, Learnings & Improvements" Doc Directive:** "Create `<PhaseTaskName>_next_steps.md` alongside your `_dev_plan.md` in the directory `[Resolved_TSA_Base_Output_Path]/[Resolved_TSA_Submodule_Plans_Subdir]/`. Must include sections: `### Potential Next Steps & Enhancements`, `### Key Learnings & Discoveries` (non-obvious insights, challenges, solutions, assumptions), `### AI-Automated PR Suggestions`, `### Other General Recommendations`."
        7.  **Inter-AI Comm Directive:** "Use the directory `[Resolved_TSA_Base_Output_Path]/[Resolved_TSA_Task_Prompts_Subdir]/ipc/` for persistent logs/artifacts not fitting commits. Document usage in commits." (Ensure this `ipc/` directory is created if needed).
        8.  **Retry Logic:** "```If retrying post-crash, investigate git log, the dev plan at `[Resolved_TSA_Base_Output_Path]/[Resolved_TSA_Submodule_Plans_Subdir]/<PhaseTaskName>_dev_plan.md`, your task's output directory `[Resolved_TSA_Base_Output_Path]/[Resolved_TSA_Task_Artifacts_Subdir]/<PhaseTaskName>/`, and logs in `[Resolved_TSA_Base_Output_Path]/[Resolved_TSA_Task_Prompts_Subdir]/ipc/`. Document findings in `_dev_plan.md`. Continue without repeating.```"
        9.  **Path Referencing:** Append ", it is in the repo." to file paths when instructing Task AIs.
        10. **Risk Assessment Directive:** "For each commit, assess risk (Low, Medium, High) based on scope, complexity, impact, test coverage, dependencies. Include in commit message: `[RISK_ASSESSMENT]` block with `- Risk-Level: <level>` and `- Justification: <explanation>` in `Notes-To-Next-Jules`."
        11. **Append Selected Add-ons:**
            a.  Retrieve `Inheritable_Addons_Content_Ordered_List` (populated by Core Instructions Section I.D.5).
            b.  For each `add_on_content_string` in this list:
                i.  **Resolve Placeholders:** Within `add_on_content_string`, replace the following placeholders with their corresponding resolved values:
                    *   `[Actual Path to Prompts Folder]` with `[Resolved_TSA_Base_Output_Path]/[Resolved_TSA_Task_Prompts_Subdir]/`
                    *   `[Actual User-Specified Path for Submodule Plans]` with `[Resolved_TSA_Base_Output_Path]/[Resolved_TSA_Submodule_Plans_Subdir]/`
                    *   `[Actual User-Specified Task Output Base Path]` with `[Resolved_TSA_Base_Output_Path]/[Resolved_TSA_Task_Artifacts_Subdir]/`
                    *   `[Project Name Placeholder]` with `Resolved_TSA_Project_Name`
                    *   `[Iteration Placeholder XX]` with `Resolved_TSA_Iteration_ID`
                    *   (Define other common placeholder mappings as necessary if they are used in inheritable add-ons.)
                ii. Append the placeholder-resolved `add_on_content_string` to the current task prompt.

C.  **Supporting Documentation (Task Spawning Specific):**
    1.  **`00_task_launch_plan.md`:** (Note: Generation of `Information_Exchange_Protocol.md` is handled by Core Instructions Section III.C.1, which should place it in `[Resolved_TSA_Base_Output_Path]/[Resolved_TSA_Task_Prompts_Subdir]/`)
        *   Create based on template. Dynamically replace placeholders.
        *   **Location:** `[Resolved_TSA_Base_Output_Path]/[Resolved_TSA_Task_Prompts_Subdir]/00_task_launch_plan.md`.
        *   **Launch Commands Path Logic:** Task prompt paths for launch commands will be like `[Resolved_TSA_Base_Output_Path]/[Resolved_TSA_Task_Prompts_Subdir]/p1_t1_example.txt`. Ensure these are correctly constructed relative to the repository root.
        *   **Missing Add-on Warnings:** If add-ons from `[[USER_ADDON_SELECTION]]` (parsed by Core Instructions Section I.D) were not found, include the warning message (provided by logic in Core Instructions I.D.4.d) at the top of TLP.
        *   **TLP TEMPLATE:**
            \`\`\`markdown
            # Task Launch Plan for [Resolved_TSA_Project_Name] - Iteration [Resolved_TSA_Iteration_ID]

            **Overall Planning Confidence:** <High | Medium | Low (P-AI to populate)>
            **Confidence Rationale:** <P-AI to provide a brief explanation...>

            ---
            ## Visual Plan Overview
            \`\`\`mermaid
            [[[P-AI TO GENERATE MERMAID FLOWCHART DIAGRAM HERE]]]
            graph TD; A["T1"] --> B["T2"];
            \`\`\`
            *(Diagram above is placeholder...)*

            [[[P-AI TO INSERT WARNINGS ABOUT MISSING ADD-ONS HERE, IF ANY]]]

            ---
            ## 1. Overview
            Welcome...
            **Key Files & Folders (relative to repo root):**
            *   Task Prompts, TLP, IEP: `[Resolved_TSA_Base_Output_Path]/[Resolved_TSA_Task_Prompts_Subdir]/`
            *   Inter-AI Communication (IPC): `[Resolved_TSA_Base_Output_Path]/[Resolved_TSA_Task_Prompts_Subdir]/ipc/`
            *   Task Sub-Development Plans (`_dev_plan.md`, `_next_steps.md`): `[Resolved_TSA_Base_Output_Path]/[Resolved_TSA_Submodule_Plans_Subdir]/`
            *   Task Output Artifacts: `[Resolved_TSA_Base_Output_Path]/[Resolved_TSA_Task_Artifacts_Subdir]/`
            ## 2. Execution Workflow
            1. Review Phases...
            2. Parallel Task Execution: ...unless "Dependencies" field indicates sequence...
            ...
            ## 3. Launching Tasks
            ---
            [[YOU MUST DYNAMICALLY GENERATE THE TASK LISTING BELOW]]
            [[FOR EACH PHASE:]]
            ### **Phase <Num> Tasks**
            *(Respect "Dependencies" for sequencing)*
            [[FOR EACH TASK:]]
            #### **Task: `<Full Prompt Filename>`**
            *   **Description:** <1-2 sentence objective>
            *   **Estimated Effort:** <S|M|L|XL>
            *   **Dependencies:** <(P-AI Populates if Applicable)...>
            *   **Initial Launch:** \`\`\`[Path to Prompt File relative to Repo Root, e.g., [Resolved_TSA_Base_Output_Path]/[Resolved_TSA_Task_Prompts_Subdir]/<Full Prompt Filename>] is the prompt, it is in the repo.\`\`\`
            *   **Retry if Crashed:** \`\`\`[Path to Prompt File relative to Repo Root, e.g., [Resolved_TSA_Base_Output_Path]/[Resolved_TSA_Task_Prompts_Subdir]/<Full Prompt Filename>] is the prompt, ...continue task.\`\`\`
            ---
            [[END OF DYNAMIC TASK LISTING]]
            ## 4. Iteration Completion
            Review `_next_steps.md`... Good luck!
            \`\`\`
            (End of 00_task_launch_plan.md template)

**IV. FINAL INSTRUCTION TO PLANNING AI & SELF-CORRECTION (Specific to Task Spawning):**
A. **Planning AI Self-Correction and Verification Checks (MANDATORY):**
    Before finalizing, perform these checks on *each generated task prompt*:
    1. Core Directives: `_dev_plan.md`? `_next_steps.md` (with `### Key Learnings & Discoveries`)? IEP reminder? Risk Assessment directive? Retry Logic?
    2. Path Placeholders: All paths constructed correctly using `Resolved_TSA_...` parameters (from Section I of this add-on)? Specific output subdirectories like `<PhaseTaskName>` correctly appended where necessary? Paths have ", it is in the repo."?
    3. Selected Add-on Inclusion: Logic for `Inheritable_Addons_Content_Ordered_List` (from Core Instructions Section I.D.5) applied? Selected add-ons appended with internal placeholders resolved according to mappings in Section III.B.11.b.i of this add-on?
    4. Clarity: Task Overview & Instructions clear?
    5. Dependency Statement: Coherent if task is dependent?
    Correct any discrepancies.
(Note: Final Commit Message by Planning AI is handled by Core Instructions Section IV.B)
