**I. USER-SPECIFIED PATHS, CONFIGURATIONS & ADD-ON SELECTIONS (Parse these first from the top of THIS MPS text):**

A. **Parse User Path Configurations:**
    You **must** parse the `[[USER PATH CONFIGURATION]]` block found at the very beginning of *this Master Prompt Segment*. Use the paths specified there by the user for generating *your outputs*.
    *   If `Main Iteration Folder` is specified as `.` (dot), this signifies the repository root (where you are operating). All other relative paths specified in that configuration block (like for 'Prompts Folder' or 'Submodule Plan Destination') are then considered directly under this repository root (e.g., if `Prompts Folder` is `prompts/tasks`, it means `<repo_root>/prompts/tasks/`).
    *   If `Main Iteration Folder` specifies a directory name (e.g., `my_project_outputs`), then other paths from the config block are typically nested within it (e.g., `my_project_outputs/prompts/tasks/`).
    *   If any path (other than `Main Iteration Folder`) is missing from the `[[USER PATH CONFIGURATION]]` block, you may use a logical default *relative to the determined Main Iteration Folder*, but state this assumption clearly in any main output file you generate (e.g., `00_task_launch_plan.md`, if the active add-on generates such a file).
    All paths you generate in task prompts and plans must be constructed clearly, typically relative to the repository root, and reflect these user-specified locations. When resolving path placeholders like `[Actual Path to Prompts Folder]`, if `Main Iteration Folder` was `.` and `Prompts Folder` was `prompts/tasks`, then `[Actual Path to Prompts Folder]` resolves to `prompts/tasks`.

B. **Parse User Add-on Selections:**
    1.  Scan the `[[USER_ADDON_SELECTION]]` block found near the beginning of *this Master Prompt Segment* (typically just after the `[[USER PATH CONFIGURATION]]` block).
    2.  If this block is found, parse each line within it.
    3.  Identify lines that begin with `[x]` (case-insensitive for 'x'). For these lines, extract the subsequent filename (e.g., `my_addon.txt`). Trim any leading/trailing whitespace from the filename.
    4.  Compile an ordered list of these selected add-on filenames. The order should match their appearance in the selection block. This list is referred to as `Selected_Addons_List`.
    5.  For each filename in `Selected_Addons_List`, the path to find the add-on text file (which the user should have provided in their repository) will be `/prompts/add_ons/[addon_filename.txt]` (this path is relative to the repository root where you are operating; it is in the repo). You will need to read the content of these files. Store these contents, associated with their filenames.
    6.  If the `[[USER_ADDON_SELECTION]]` block is not found, or if no add-ons are marked with `[x]`, `Selected_Addons_List` will be empty.
    7.  If an add-on file in `Selected_Addons_List` is not found at its expected path (e.g., `/prompts/add_ons/non_existent_addon.txt`), you **must** prepare a clear warning message listing which selected add-ons could not be found. This warning should be suitable for inclusion in a main planning document (like `00_task_launch_plan.md`, if the `task_spawning_addon.txt` or another add-on generates one). Then, proceed using only the add-ons that were successfully located and read. Remove unfound filenames from `Selected_Addons_List` and do not attempt to process them further. Store the successfully read add-on contents for processing as per Section II.

C. **Input Definition Files (Base IEP):**
    You will also need to read certain definition files provided by the user. Specifically, the Base IEP content is expected at `/prompts/iep/Base_IEP.txt` (this path is relative to the repository root where you are invoked; it is in the repo). This will be referenced in Section III.C.1 below.

**II. ADD-ON EXECUTION AND CONDITIONAL LOGIC:**

A. **Identify Primary Task Spawning Add-on:**
    1. After parsing add-ons as per Section I.B, check if `task_spawning_addon.txt` is present in the `Selected_Addons_List`.

B. **Execution Path based on `task_spawning_addon.txt` Selection:**
    1.  **If `task_spawning_addon.txt` IS SELECTED:**
        a.  You should treat `task_spawning_addon.txt` as the primary directive for project planning and task generation. Execute its instructions. This will typically lead to the generation of a main development plan, a `00_task_launch_plan.md`, and individual task prompt files.
        b.  The instructions within `task_spawning_addon.txt` will guide you on how to structure these outputs and may refer to path configurations you parsed in Section I.A.
        c.  Other selected add-ons (e.g., `task_resumption_addon.txt`, coding standards) should be considered supplementary. Their content is typically appended to the task prompts generated by `task_spawning_addon.txt`, as detailed in `task_spawning_addon.txt` itself (see its Section III.B.11).
    2.  **If `task_spawning_addon.txt` IS NOT SELECTED:**
        a.  You **must** state clearly in your primary output or log (e.g., if you are asked to create a general status report, or in the commit message if no other file output is requested) that `task_spawning_addon.txt` was not selected and therefore, no main project development plan, `00_task_launch_plan.md`, or specific task prompts will be generated *by default core logic*.
        b.  Proceed to process any other add-ons present in the `Selected_Addons_List`. These add-ons might provide alternative primary directives or utility functions. Execute their instructions accordingly.
        c.  If no other selected add-ons provide primary operational directives (i.e., they are only utility add-ons or there are no other add-ons), you should:
            i.  Generate the `Information_Exchange_Protocol.md` as per Section III.C.1 below.
            ii. State that you have completed processing available utility instructions and are awaiting further specific directives or will conclude operations. Include any warnings generated (e.g., about missing add-ons from I.B.7).
            iii. Your commit message (Section IV.B) should reflect this operational status.

C. **General Add-on Processing:**
    For any selected add-on that is not `task_spawning_addon.txt` (or for `task_spawning_addon.txt` itself if it's selected), its instructions should be followed. Add-ons are processed in the order they appear in the `Selected_Addons_List`. The nature of "appending" add-on content is typically relevant when `task_spawning_addon.txt` is active and generating task prompts. If other add-ons are active without `task_spawning_addon.txt`, they must be self-contained or define how they interact.

**III. OUTPUT GENERATION REQUIREMENTS (Core Utilities):**

**C. Supporting Documentation (Core Utilities):** 
(Note: Specific documents like Main Development Plan, Task Prompts, and Task Launch Plan are typically handled by specialized add-ons like task_spawning_addon.txt, if selected.)
1.  **`Information_Exchange_Protocol.md`:**
    *   This file should be generated if EITHER `task_spawning_addon.txt` is selected OR if it's not selected but no other primary directive add-on is present (as per II.B.2.c.i).
    *   Read content from user-provided `/prompts/iep/Base_IEP.txt` (path relative to repo root where you operate; it is in the repo - see Section I.C).
    *   Create `Information_Exchange_Protocol.md` in the 'Prompts Folder' you're generating (e.g., `[Actual Path to Target Project's Prompts Folder]/Information_Exchange_Protocol.md` - path from Section I.A).
    *   Write exact content from `/prompts/iep/Base_IEP.txt` into it. Ensure example `Notes-To-Next-Jules` in it includes an illustration of `[RISK_ASSESSMENT]` block (user's `Base_IEP.txt` should ideally have this).

**IV. FINAL INSTRUCTION TO PLANNING AI & SELF-CORRECTION (Core):**
(Note: Specific self-correction checks related to task generation are typically handled by specialized add-ons like task_spawning_addon.txt)
B. **Final Commit Message by Planning AI:**
    Adhere to IEP (from `/prompts/iep/Base_IEP.txt` - see Section I.C).
    *   Task-ID should reflect the main operation (e.g., "INITIAL_PROJECT_PLANNING_ITER_XX" if `task_spawning_addon.txt` was processed, or "CORE_PROCESSING_ONLY" or similar if it was not and no other primary add-on was active).
    *   Notes must state:
        *   Whether `task_spawning_addon.txt` was selected and processed.
        *   A summary of other add-ons processed.
        *   Self-checks performed (as per active add-on(s), if any).
        *   Include `[PLANNING_CONFIDENCE]` block (if applicable, typically generated when `task_spawning_addon.txt` is active).
        *   Any warnings (e.g. missing add-ons).
