[[START OF MASTER PROMPT SEGMENT (v0.3 - incorporates Configurable Add-on Stack): AI Project Planning & Task Generation Instructions]]

ATTENTION PLANNING AI: Your primary function is to interpret the user's project request (provided immediately preceding this segment) and generate a comprehensive, phased execution plan. This involves creating detailed task prompts for subsequent AI instances ("Task AIs") and all necessary supporting documentation. Adhere strictly to the following instructions and output requirements.

**I. USER-SPECIFIED PATHS, CONFIGURATIONS & ADD-ON SELECTIONS:**
A. **Parse User Path Configurations:**
    The user may provide paths for:
        A. Destination for submodule development plans (`_dev_plan.md`, `_next_steps.md`).
        B. Folder for generated task prompts and launch plans (defaults to `prompts/` within the main iteration folder).
        C. Folder for inter-AI communication/documentation (defaults to `prompts/ipc/` within the chosen prompts folder).
        D. The main iteration folder (defaults to `/mps_XX/` at the repository root, where XX is the current iteration number, e.g., `01`).
        E. A User-Specified Task Output Base Path (where Task AIs should place their primary deliverables like code).

    You **must** parse the `[[USER PATH CONFIGURATION]]` block at the beginning of this overall prompt. Use the paths specified there.
    *   If `Main Iteration Folder` is specified as `.` (dot), this signifies the repository root. All other relative paths specified in the configuration (like for 'Prompts Folder' or 'Submodule Plan Destination') are then considered directly under this repository root (e.g., `prompts/`, `plan/`).
    *   If `Main Iteration Folder` specifies a directory name (e.g., `my_project_outputs`), then other paths are typically nested within it (e.g., `my_project_outputs/prompts/`).
    *   If any path (other than `Main Iteration Folder`) is missing from the `[[USER PATH CONFIGURATION]]` block, you may use a logical default *relative to the determined Main Iteration Folder*, but state this assumption clearly in your `00_task_launch_plan.md`.
    All paths you generate in prompts and plans must be constructed clearly, typically relative to the repository root, and reflect these user-specified locations. When resolving path placeholders like `[Actual Path to Prompts Folder]`, if `Main Iteration Folder` was specified as `.` and `Prompts Folder` was `prompts`, then `[Actual Path to Prompts Folder]` resolves to `prompts`.

    You will also need to read certain definition files provided by the user (e.g., for the Base IEP and any specified Add-ons). These files are expected to be in predefined paths relative to the repository root where you are invoked (e.g., `/prompts/ipc/Base_IEP.txt`, `/prompts/add_ons/some_addon.txt`). The specific paths for these input definition files will be referenced directly in the relevant instruction sections below.

B. **Parse User Add-on Selections:**
    1.  Scan the beginning of the overall prompt (typically after the `[[USER PATH CONFIGURATION]]` block and the user's main project request, but before this Master Prompt Segment starts) for a block demarcated by `[[USER_ADDON_SELECTION]]` and `[[END USER_ADDON_SELECTION]]`.
    2.  If this block is found, parse each line within it.
    3.  Identify lines that begin with `[x]` (case-insensitive for 'x'). For these lines, extract the subsequent filename (e.g., `my_addon.txt`). Trim any leading/trailing whitespace from the filename.
    4.  Compile an ordered list of these selected add-on filenames. The order should match their appearance in the selection block.
    5.  For each filename in your compiled list, the path to the add-on text file will be `/prompts/add_ons/[addon_filename.txt]` (relative to the repository root where you are operating; it is in the repo). You will need to read the content of these files.
    6.  If the `[[USER_ADDON_SELECTION]]` block is not found, or if no add-ons are marked with `[x]`, proceed without applying any optional add-ons.
    7.  If an add-on file selected by the user is not found at its expected path (e.g., `/prompts/add_ons/non_existent_addon.txt`), you **must** log a clear warning at the top of the `00_task_launch_plan.md` file you generate (after the Confidence Score and Visual Overview sections), listing which selected add-ons could not be found. Then, proceed with the planning using only the add-ons that were successfully located and read. Store the successfully read add-on contents for use in Section III.B.

**II. CORE PLANNING & TASK DEFINITION DIRECTIVES:**
1.  **Understand User's Project:** Thoroughly analyze the user's project description, including any referenced input documents (specifications, research, requirements) and exemplar plans for style and detail. Perform research if indicated. The primary deliverable you will be creating based on the user's request is often a main development plan document (e.g., `gritos_dev_plan.md`); your subsequent task prompts will break this main plan into executable pieces.
2.  **Phased Structure:** Decompose the project into 2-5 logical phases. Tasks within a phase should be executable in parallel; phases themselves are sequential.
3.  **Task Granularity & Parallelism:** Define tasks within each phase to be as granular as possible while remaining meaningful. Design these tasks for maximum parallel execution by different Task AIs.
4.  **Merge Conflict Mitigation Strategy (HIGHEST PRIORITY):**
    *   Your **highest priority** during task decomposition is the elimination or severe mitigation of potential merge conflicts.
    *   Actively identify any tasks that might write to the same file(s) or where one task might read a file that a concurrent task in the same phase modifies.
    *   If such a potential conflict is identified:
        *   First, attempt to redesign the tasks to operate on entirely separate files or distinct, non-overlapping parts of shared files. Task AIs should primarily create *new* files in their designated output directories (see `User-Specified Task Output Base Path`).
        *   If redesign is not feasible to completely avoid the conflict, you **must** serialize these tasks. This means placing them in different phases, or if they must remain within the same conceptual phase due to logical grouping, ensure your generated `00_task_launch_plan.md` clearly indicates a specific sequential order for these conflicting tasks *within* that phase **by using the 'Dependencies' field (see Section III.C.2) for the dependent tasks**, and the task prompts reflect this dependency.
        *   Task prompts for serialized tasks must clearly state their dependencies on the completion of preceding tasks. **When generating the prompt for a dependent task, include an introductory note, e.g., "Note: This task depends on the successful completion of Task X (see prompt file `[Task_X_Prompt_Filename]`). Ensure its deliverables are available and verified before you begin."**
        *   If a task *must* modify existing shared code (as per the `User-Specified Task Output Base Path`), the task prompt you generate for that task must be *extremely specific* about the exact functions,
classes, or sections of code to be modified, the nature of the changes, and any assumptions about the state of that shared code. Also, instruct the Task AI to be extra vigilant in using the `Owned-Files-Modules` field in the Information Exchange Protocol (IEP) for such shared resources.
5.  **File Naming Conventions:**
    *   Main Development Plan (if you are creating/drafting its content): As specified by user (e.g., `gritos_dev_plan.md`), place in the "Submodule Plan Destination" path.
    *   Task Prompts: `p<Phase#_t<Task#_<brief_description_lowercase_underscores>.txt` (e.g., `p1_t1_database_schema.txt`).
    *   Task Launch Plan: `00_task_launch_plan.md`.
    *   Submodule Dev Plans (created by Task AIs): `<prompt_filename_base>_dev_plan.md` (e.g., `p1_t1_database_schema_dev_plan.md`).
    *   Next Steps Docs (created by Task AIs): `<prompt_filename_base>_next_steps.md`.
6.  **Task Effort Estimation (Heuristic):**
    *   For each task you define, provide a heuristic estimate of its effort/complexity. Use T-shirt sizes: S (Small), M (Medium), L (Large), XL (Extra Large).
    *   Base your estimate on factors like the perceived amount of work, number of components involved, apparent complexity of logic, and potential dependencies or unknowns.
    *   Your goal is to break down work such that most tasks are S or M. If a task seems L, ensure it's well-defined. **Avoid generating XL tasks; if a part of the plan seems XL, you must attempt to decompose it further into smaller, more manageable tasks (S, M, L).** If decomposition of an XL item isn't feasible while meeting other constraints, clearly flag it as XL in the `00_task_launch_plan.md` and suggest user review for that specific item.
7.  **Planning Confidence Assessment & Reporting:**
    *   After generating the complete plan (including all task prompts and the `00_task_launch_plan.md`), you must perform a self-assessment of your confidence in the quality and executability of the generated plan.
    *   Determine a confidence level: **High, Medium, or Low.**
    *   Base this on factors such as: the clarity and completeness of the user's initial request, your ability to effectively decompose tasks into manageable sizes (S/M/L, avoiding XL), the number of tasks requiring serialization due to potential merge conflicts, and the overall perceived completeness of information available to you.
    *   You must report this confidence score and a brief rationale in two places:
        1.  At the very top of the `00_task_launch_plan.md` you generate (see Section III.C.2 template update).
        2.  In your final commit message for this planning task, using a `[PLANNING_CONFIDENCE]` block within the `Notes-To-Next-Jules` field of the IEP (see Section IV.B).
8.  **Visual Plan Overview Generation (Mermaid Syntax):**
    *   After defining all phases and tasks, you must generate a visual overview of the plan using Mermaid JS flowchart syntax.
    *   This diagram should depict:
        *   Phases as distinct groups or subgraphs.
        *   Key tasks (using their Task IDs/short descriptions) within each phase.
        *   Dependencies between tasks (especially serialized tasks) as arrows.
        *   Dependencies between phases (sequential flow).
    *   You will embed this Mermaid diagram code block at the top of the `00_task_launch_plan.md` file (after the Planning Confidence Score section, see Section III.C.2 template update).
    *   Example of simple Mermaid flowchart syntax for a plan:
        \`\`\`mermaid
        graph TD
            subgraph Phase 1
                P1_T1["Task 1.1: Init Setup"]
                P1_T2["Task 1.2: Define Schema"]
            end
            subgraph Phase 2
                P2_T1["Task 2.1: Build Core"]
                P2_T2["Task 2.2: Develop API"]
            end
            P1_T1 --> P2_T1
            P1_T2 --> P2_T1
            P2_T1 --> P2_T2
            Phase1_End["Phase 1 Complete"]
            P1_T1 --> Phase1_End
            P1_T2 --> Phase1_End
            Phase1_End --> P2_T1
        \`\`\`
        (Adapt the diagram's complexity to the plan. For very complex plans, focus on major tasks and phase flows.)

**III. OUTPUT GENERATION REQUIREMENTS:**

All file paths below are relative to the "Main Iteration Folder" identified from the `[[USER PATH CONFIGURATION]]` block (which could be the repository root if `.` was specified).

**A. Main Development Plan Document (e.g., `gritos_dev_plan.md`):** (As defined in MPS v0.2.2)

**B. Task Prompt Files (`.txt`):**
    *   **Location:** (As defined in MPS v0.2.2)
    *   **For Each Task Defined in your Main Development Plan, Generate a Prompt File Containing:**
        (Directives 1-5, 7-10: Task Overview (with dependency reiteration), Sub-Dev Plan, Detailed Instructions, Output Management, IEP Adherence (including Risk Assessment reminder), Inter-AI Comm, Retry Logic, Path Referencing, Risk Assessment Directive - Same as MPS v0.2.2)
        6.  **"Next Steps, Learnings & Improvements" Document Directive:** (Includes Knowledge Capture - Same as MPS v0.2.2)
        11. **NEW (replaces old Section V): Append Selected Add-ons:**
            *   "Retrieve the ordered list of selected add-on contents you compiled and read in Section I.B."
            *   "For each selected add-on, append its full, unmodified text to the end of this current task prompt."
            *   "Ensure add-ons are appended in the same order they were listed in the `[[USER_ADDON_SELECTION]]` block."
            *   "Crucially, before appending each add-on's text, you must resolve any path placeholders within that add-on's text (e.g., `[Actual Path to Prompts Folder]`, `[Actual User-Specified Path for Submodule Plans]`, `[Actual User-Specified Task Output Base Path]`, `<ExactOriginalTaskPromptFilenameBase>`) using the correct values derived from the `[[USER PATH CONFIGURATION]]` block (Section I.A) and the current task's context. This ensures the add-on operates correctly for this specific task."

**C. Supporting Documentation (in the designated "Prompts Folder" for the target project):**
1.  **`Information_Exchange_Protocol.md`:** (Instruction to read from `/prompts/ipc/Base_IEP.txt` and copy, ensuring Risk Assessment example is present - Same as MPS v0.2.2)
2.  **`00_task_launch_plan.md`:**
    *   (Instructions for dynamic placeholder replacement, critical launch command path generation - Same as MPS v0.2.2)
    *   **NEW (Addition to top of TLP):** If any selected add-ons were not found (as per Section I.B.7), add a warning section here, e.g.:
        \`\`\`markdown
        ---
        **WARNING: Missing Add-ons**
        The following add-ons selected in `[[USER_ADDON_SELECTION]]` could not be found at their expected paths (under `/prompts/add_ons/`) and were NOT applied:
        - `missing_addon1.txt`
        - `another_missing_addon.txt`
        ---
        \`\`\`
    *   **TLP TEMPLATE (incorporates Confidence Score, Visual Overview, Effort, Dependencies fields - Same as MPS v0.2.2):**
        (Full template text as in MPS v0.2.2)

**IV. FINAL INSTRUCTION TO PLANNING AI & SELF-CORRECTION:**
**A. Planning AI Self-Correction and Verification Checks (MANDATORY):**
    (List of checks as in MPS v0.2.2, but ensure check #3 for Mandated Add-on Inclusion now refers to the `[[USER_ADDON_SELECTION]]` logic: "Verify that the logic to parse `[[USER_ADDON_SELECTION]]` and append the *selected* add-ons (with placeholders resolved) has been correctly applied. If `[[USER_ADDON_SELECTION]]` was not present or no add-ons were selected, confirm no optional add-ons were appended unless explicitly mandated elsewhere by this MPS (though currently none are).")
**B. Final Commit Message by Planning AI:** (Same as MPS v0.2.2 - including Planning Confidence block and stating self-checks performed)

**V. TASK RESUMPTION ADD-ON INCORPORATION (MANDATORY, if specified by user setup):**
    *   **(REMOVED/SUPERSEDED by Section I.B and III.B.11)** This section is removed. All add-ons are now handled by the `[[USER_ADDON_SELECTION]]` mechanism.

[[END OF MASTER PROMPT SEGMENT (v0.3 - incorporates Configurable Add-on Stack)]]
